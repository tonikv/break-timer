{"version":3,"sources":["components/TimerWindow.js","components/TimerControls.js","components/TimerAdjust.js","functions/timeParser.js","App.js","index.js"],"names":["TimerWindow","time","working","Card","className","Body","Title","Text","minutes","seconds","TimerControls","setState","restart","onClick","TimerAdjust","changeValue","type","showtime","work","break","timeParser","toString","App","useState","timer","setTimer","paused","setPaused","useEffect","interval","setInterval","changeSession","newState","window","navigator","vibrate","clearInterval","Container","fluid","style","marginTop","paddingTop","width","height","border","borderRadius","textAlign","padding","Row","Col","xs","span","offset","fontSize","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2f221c9.chunk.js","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card';\n\nconst TimerWindow = ( {time, working} ) => {\n    return (\n        <div>\n            <Card className=\"text-center\">\n                <Card.Body>\n                    <Card.Title>{working ? 'Working' : 'Take a Break'}</Card.Title>\n                    <Card.Text>\n                        {time.minutes}:{time.seconds}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default TimerWindow\n","import React from 'react'\nimport { AiFillPlayCircle, AiFillPauseCircle } from 'react-icons/ai';\nimport { RiRestartFill } from 'react-icons/ri';\n\n\nconst TimerControls = ( {setState, restart} ) => {\n    return (\n        <div>\n            <AiFillPlayCircle className='control' onClick={setState(false)}/>\n            <AiFillPauseCircle className='control' onClick={setState(true)}/>\n            <RiRestartFill className='control' onClick={restart()}/>\n        </div>\n    )\n}\n\nexport default TimerControls\n","import React from 'react'\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\n\nconst TimerAdjust = ( {changeValue, time, type} ) => {\n    let showtime = type === 'work' ? time.work : time.break\n    return (\n        <div>\n            {type}\n            <FaArrowUp onClick={changeValue('up')} className=\"arrows\"/> \n            {showtime} \n            <FaArrowDown onClick={changeValue('down')} className=\"arrows\"/> \n        </div>\n    )\n}\n\nexport default TimerAdjust\n","export default function timeParser(time) {\n    let minutes = time.minutes.toString();\n    let seconds = time.seconds.toString();\n    if(time.seconds < 10) {\n        seconds = `0${seconds}`\n    }\n    const timeObject = {\n        minutes: minutes,\n        seconds: seconds\n    }\n    return timeObject\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Alert from 'react-bootstrap/Alert';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\nimport TimerWindow from './components/TimerWindow';\nimport TimerControls from './components/TimerControls';\nimport TimerAdjust from './components/TimerAdjust';\nimport React, { useState, useEffect } from 'react'\nimport timeParser from './functions/timeParser';\n\nfunction App() {\n  const [timer, setTimer] = useState ({\n    minutes: 25,\n    seconds: 0,\n    work: 25,\n    break: 5,\n    working: true,\n  });\n\n  const [paused, setPaused] = useState(true);\n\n  useEffect(() => {\n    if(paused) {\n      return;\n    }\n    const interval = setInterval(() => {\n      let seconds = timer.seconds;\n      let minutes = timer.minutes;\n      let changeSession = false;\n      let newState = {};\n\n      if (seconds - 1 === -1) {\n        seconds = 59;\n        minutes = minutes - 1;\n      } else {\n        seconds = seconds - 1;\n      }\n\n      if(minutes === 0 && seconds === 0) {\n        window.navigator.vibrate(300);\n        if(timer.working) {\n          minutes = timer.break\n        } else {\n          minutes = timer.work;\n        }\n        changeSession = true;\n      }\n\n      if(changeSession) {\n        newState = {\n          ...timer,\n          minutes: minutes,\n          seconds: seconds,\n          working: !timer.working\n        }\n      } else {\n        newState = {\n          ...timer,\n          minutes: minutes,\n          seconds: seconds\n        }\n      }\n\n      setTimer(newState);\n    }, 1000);\n\n    return () => clearInterval(interval);\n\n  }, [paused, timer]);\n\n\n  const handleClickWork = (type) => () => {\n    if(type === \"up\") {\n      setTimer({...timer, work: timer.work + 1});\n    } else if (type === \"down\") {\n      setTimer(\n        {...timer,\n          work: timer.work - 1 === 0 ? 1 : timer.work - 1});\n    }\n  }\n\n  const handleClickBreak = (type) => () => {\n    if(type === \"up\") {\n      setTimer({...timer, break: timer.break + 1});\n    } else if (type === \"down\") {\n      setTimer(\n        {...timer,\n          break: timer.break- 1 === 0 ? 1 : timer.break - 1});\n    }\n  }\n\n  const setState = (value) => () => {\n    setPaused(value)\n  }\n\n  const restart = () => () => {\n    setTimer({\n      ...timer,\n      minutes: timer.work,\n      seconds: 0,\n      working: true,\n    })\n  }\n\n  return (\n    <Container fluid style={{marginTop: '40px', paddingTop: '20px', width: '20rem', height: '20rem', border: '3px solid black', borderRadius: '10px'}}>\n      <h1 style={{textAlign: 'center', padding: '10px'}}>BREAK TIMER</h1>\n      <Row style={{padding: '0px 0 20px 0'}}>\n        <Col xs={{ span: 5, offset: 1}}>\n          <TimerAdjust changeValue={handleClickWork} time={timer} type='work'/>\n        </Col>\n        <Col>\n        <TimerAdjust changeValue={handleClickBreak} time={timer} type='break'/>\n        </Col>\n      </Row>\n        <TimerWindow time={timeParser(timer)} working={timer.working}/>\n      <Row>\n        <Col style={{textAlign: 'center', fontSize: '3rem'}}>\n          <TimerControls setState={setState} restart={restart}/>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}